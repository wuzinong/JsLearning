!function(n,e){for(var t in e)n[t]=e[t]}(exports,function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=1)}([function(n,e){n.exports=require("domain")},function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=t(2);e.default=r.createServerRenderer(function(n){return new Promise(function(e,t){e({html:"<h1>This is rendered from server</h2>\n               <div>Current time:"+new Date+"</div>\n               <div>URL:"+n.location.path+"</div>\n               <div>IsAdministrator:"+n.data.isAdministrator+"</div>\n               <div>Number of cookies:"+n.data.cookies.length+"</div>\n          "})})})},function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(n){for(var t in n)e.hasOwnProperty(t)||(e[t]=n[t])}(t(3))},function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=t(4),o=t(0),u=t(5),i=3e4;e.createServerRenderer=function(n){var e=function(e,t,c,a,l,s,f,d){var _,m=new Promise(function(n,e){_=n}),v=r.parse(a),p={location:r.parse(l,!0),origin:v.protocol+"//"+v.host,url:l,baseUrl:(d||"")+"/",absoluteUrl:a,domainTasks:m,data:s},b=p.origin+p.baseUrl;u.run(function(){!function(n,e){var t=n.then;n.then=function(n,r){return"function"==typeof n&&(n=e.bind(n)),"function"==typeof r&&(r=e.bind(r)),t.call(this,n,r)}}(m,o.active),u.baseUrl(b);var t=n(p);if(t&&"function"==typeof t.then){var r=f||i;(r>0?function(n,e,t){return new Promise(function(r,o){var u=setTimeout(function(){o(t)},e);n.then(function(n){clearTimeout(u),r(n)},function(n){clearTimeout(u),o(n)})})}(t,r,"Prerendering timed out after "+r+"ms because the boot function in '"+c.moduleName+"' returned a promise that did not resolve or reject. Make sure that your boot function always resolves or rejects its promise. You can change the timeout value using the 'asp-prerender-timeout' tag helper."):t).then(function(n){e(null,n)},function(n){e(n,null)})}else e("Prerendering failed because the boot function in "+c.moduleName+" did not return a promise.",null)},function(n){n?e(n,null):_()})};return e.isServerRenderer=!0,e}},function(n,e){n.exports=require("url")},function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=t(0),u=t(6),i="__DOMAIN_TASKS",c="__DOMAIN_TASK_INTERNAL_FETCH_BASEURL__DO_NOT_REFERENCE_THIS__";e.addTask=function(n){if(n&&o.active){var e=u.get(i);e&&(e.numRemainingTasks++,n.then(function(){setTimeout(function(){e.numRemainingTasks--,0!==e.numRemainingTasks||e.hasIssuedSuccessCallback||(e.hasIssuedSuccessCallback=!0,setTimeout(function(){e.completionCallback(null)},0))},0)},function(n){e.completionCallback(n)}))}},e.run=function(n,e){var t;return u.runInNewDomain(function(){var r={numRemainingTasks:0,hasIssuedSuccessCallback:!1,completionCallback:o.active.bind(e)};try{u.set(i,r),t=n(),0!==r.numRemainingTasks||r.hasIssuedSuccessCallback||(r.hasIssuedSuccessCallback=!0,setTimeout(function(){r.completionCallback(null)},0))}catch(n){r.completionCallback(n)}}),t},e.baseUrl=function(n){return n&&(o.active?u.set(c,n):r=n),o.active?u.get(c):r}},function(n,e,t){var r;r=t(0),e.context=function(n,e){if(null==e&&(e=r.active),null==e)throw new Error("no active domain");return e.__context__=null!=n?n():{}},e.cleanup=function(n,e,t){if(null==e&&(e=null),null==t&&(t=r.active),e=e||t.__context__,null!=n&&null!=e&&n(e),null!=t)return t.__context__=null},e.onError=function(n,e,t,o){return null==t&&(t=null),null==o&&(o=r.active),t=t||o.__context__,null!=e&&e(n,t),o.__context__=null},e.get=function(n,e){if(null==e&&(e=r.active),null==e)throw new Error("no active domain");return e.__context__[n]},e.set=function(n,e,t){if(null==t&&(t=r.active),null==t)throw new Error("no active domain");return t.__context__[n]=e},e.run=function(n,t){var o,u,i,c,a;if(t||(t=n,n={}),u=n.context,o=n.cleanup,a=n.onError,!(i=n.domain||r.active))throw new Error("no active domain");i.on("dispose",function(){return e.cleanup(o,null,i)}),i.on("error",function(n){return null!=a?e.onError(n,a,null,i):e.cleanup(o,null,i)}),e.context(u,i);try{i.bind(t,!0)()}catch(n){c=n,i.emit("error",c)}return i},e.runInNewDomain=function(n,t){var o;return t||(t=n,n={}),o=r.active,n.domain=r.create(),!n.detach&&o&&(o.add(n.domain),n.domain.on("error",function(n){return o.emit("error",n)}),o.on("dispose",function(){return n.domain.dispose()})),e.run(n,t)},e.middleware=function(n,t){return function(o,u,i){var c,a;return"function"!=typeof n&&(n=(a=n).context,t=a.cleanup),c=r.active,e.context(n,c),u.on("finish",function(){return e.cleanup(t,null,c)}),o.__context__=c.__context__,i()}},e.middlewareOnError=function(n){return function(t,r,o,u){return"function"!=typeof n&&(n=n.onError),null!=n?e.onError(t,n,r.__context__):e.cleanup(n,r.__context__),r.__context__=null,u(t)}}}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,